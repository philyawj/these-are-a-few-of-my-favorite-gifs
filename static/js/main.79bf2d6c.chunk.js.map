{"version":3,"sources":["Components/GifCard.js","Components/GifBadges.js","Components/GifContainer.js","App.js","serviceWorker.js","index.js"],"names":["GifCard","Card","key","this","props","index","className","Img","alt","gif","src","name","Body","Text","tags","map","tag","onClick","e","handleTagClick","data-tag","React","Component","GifBadges","Badge","variant","handleBadgeClick","GifContainer","state","inputValue","gifs","topTags","gifFilterOnChange","event","setState","target","value","str","textContent","substr","length","array","i","j","Math","floor","random","temp","preventDefault","shuffleArray","data","forEach","tagString","join","topArrayTags","oneTagArray","concat","tagCounts","x","tagSorted","Object","keys","sort","a","b","slice","filteredGifs","filter","toLowerCase","includes","Form","onSubmit","formPreventDefault","Group","controlId","Control","placeholder","size","type","onChange","CardColumns","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79bf2d6c.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\nimport Card from 'react-bootstrap/Card';\n\nclass GifCard extends React.Component {\n    render() {\n        return (\n            <Card key={this.props.index} className=\"bg-dark text-white\">\n                <Card.Img className=\"gif-img\" alt={this.props.gif.alt} src={'/assets/gifs/' + this.props.gif.name + '.gif'} />\n                <Card.Body>\n                    <Card.Text>\n                        {this.props.gif.tags.map((tag, index) =>\n                            <span onClick={(e) => this.props.handleTagClick(e)} key={index} className=\"gif-tag\" data-tag={tag}>#{tag}</span>\n                        )}\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default GifCard;","import React from 'react';\nimport '../App.css';\nimport Badge from 'react-bootstrap/Badge';\n\nclass GifBadges extends React.Component {\n    render() {\n        return (\n            <div>\n                <h6>\n                    {this.props.tags.map((tag, index) =>\n                        <Badge key={index} variant=\"dark\" onClick={(e) => this.props.handleBadgeClick(e)}>\n                            #{tag}\n                        </Badge>\n                    )}\n                </h6>\n            </div>\n        );\n    }\n}\n\nexport default GifBadges;","import React from 'react';\nimport '../App.css';\nimport data from '../gifs.json'\nimport CardColumns from 'react-bootstrap/CardColumns';\nimport Form from 'react-bootstrap/Form';\nimport GifCard from './GifCard';\nimport GifBadges from './GifBadges';\n\nclass GifContainer extends React.Component {\n\n    state = {\n        inputValue: '',\n        gifs: [],\n        topTags: []\n    };\n\n    shuffleArray(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    formPreventDefault(e) {\n        e.preventDefault();\n    };\n\n    componentDidMount() {\n        // join the tags array into comma seperated tag string to filter with toLowerCase() for filteredGifs\n        this.shuffleArray(data.gifs).forEach(gif => {\n            gif.tagString = gif.tags.join();\n        });\n\n        // set state on load to full list of gifs\n        this.setState({ gifs: data.gifs });\n\n        // load badges of top tags at top below search bar\n        this.topArrayTags();\n    }\n\n    gifFilterOnChange = (event) => {\n        // as search bar text input changes, change state of what gifs are filtered and shown\n        this.setState({ inputValue: event.target.value });\n    };\n\n    handleTagClick = (event) => {\n        // clicking tag under gif sets search bar\n        let str = event.target.textContent;\n        // substr removes front # and ending space\n        this.setState({ inputValue: str.substr(1, str.length - 1) });\n    };\n\n    handleBadgeClick = (event) => {\n        // clicking tag under gif sets search bar\n        let str = event.target.textContent;\n        // substr removes front # and ending space\n        this.setState({ inputValue: str.substr(1, str.length - 1) });\n    };\n\n    topArrayTags() {\n        // get all tags into one array\n        let oneTagArray = [];\n        data.gifs.forEach(gif => oneTagArray = oneTagArray.concat(gif.tags));\n\n        // key: value counts\n        let tagCounts = {};\n        oneTagArray.forEach(function (x) { tagCounts[x] = (tagCounts[x] || 0) + 1; });\n\n        // state set to tags in order of highest usage\n        let tagSorted = Object.keys(tagCounts);\n        tagSorted = tagSorted.sort(function (a, b) { return tagCounts[b] - tagCounts[a] });\n        this.setState({ topTags: tagSorted.slice(0, 19) });\n    };\n\n    render() {\n        const filteredGifs = this.state.gifs.filter(gif => {\n            return gif.tagString.toLowerCase().includes(this.state.inputValue.toLowerCase());\n        });\n\n        return (\n            <div className=\"container\">\n                <Form className=\"search-bar\" onSubmit={this.formPreventDefault}>\n                    <Form.Group controlId=\"formBasicEmail\">\n                        <Form.Control placeholder=\"Search\" size=\"lg\" type=\"text\" value={this.state.inputValue} onChange={this.gifFilterOnChange} />\n                    </Form.Group>\n                </Form>\n\n                <GifBadges tags={this.state.topTags} handleBadgeClick={this.handleBadgeClick} />\n\n                <CardColumns>\n                    {filteredGifs.map((gif, index) =>\n                        <GifCard gif={gif} index={index} key={index} handleTagClick={this.handleTagClick} />\n                    )}\n                </CardColumns>\n            </div>\n        );\n    }\n}\n\nexport default GifContainer;","import React from 'react';\nimport GifContainer from './Components/GifContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GifContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}